
user klambert staff;
#worker_processes 2;

# KJSL RTMP
worker_processes auto;
worker_rlimit_nofile 100000;


error_log  /usr/local/etc/nginx/logs/error.log debug;

events {
  # KJSL 1024 -> 4000
  worker_connections  4000;
  multi_accept on;  # accept many connections
}

rtmp {
  server {
    listen 1935; # Listen on standard RTMP port
    ping 30s;
    notify_method get;
    chunk_size 4096;
    # video on demand for flv files
    application vod {
      play /mnt/flvs;
    }
    # video on demand for mp4 files
    application vod2 {
      play /mnt/mp4s;
    }
    # This application is to accept incoming stream
    application live {
      live on; # Allows live
      allow play all;
      on_publish http://127.0.0.1:3000/rtmp_key_auth;
        on_done http://127.0.0.1:3000/rtmp_streams_end;
      # on play event triggers when any client is streaming and displaying the streams
      #on_play http://127.0.0.1:3000/rtmp_key_auth;
      # Once receive stream, transcode for adaptive streaming
      # This single ffmpeg command takes the input and transforms
      # the source into 4 different streams with different bitrate
      # and quality. P.S. The scaling done here respects the aspect
      # ratio of the input.
      exec bash /opt/live_stream/exec_wrapper.sh $app $name;
      exec_kill_signal term;
      record all;
      record_path /mnt/recordings;
      record_unique on;
      record_append on;
      exec_record_done ffmpeg -i /mnt/recordings/ -f mp4 /mnt/mp4s/$basename.mp4;
    }
    application live_mobile {
      live on;
      allow play all;
      #-max_muxing_queue_size 4000
      #-hls_list_size 100
      on_publish http://127.0.0.1:3000/rtmp_key_auth;
        exec_push ffmpeg -re -i rtmp://127.0.0.1/$app/$name -async 1 -vsync -1 -c:v copy -c:a copy -tune zerolatency -preset veryfast -crf 23 -f hls -hls_time 10 -hls_playlist_type event /Users/klambert/rtmp/hls/$name.m3u8;
      record all;
      record_path /mnt/recordings;
      record_unique on;
      record_append on;
      exec_record_done ffmpeg -i /mnt/recordings/ -f mp4 /mnt/mp4s/$basename.mp4;
    }
    # This application is for splitting the stream into HLS fragments
    application show {
      live on; # Allows live input from above
      hls on; # Enable HTTP Live Streaming
      hls_fragment 3;
      hls_playlist_length 60;
      #hls_sync 100ms;
      hls_continuous on;
      deny play all;
      # Pointing this to an SSD is better as this involves lots of IO
      hls_path /Users/klambert/rtmp/hls/;
      hls_cleanup on;
      record all;
      record_path /mnt/recordings;
      record_unique on;
      record_append on;
      exec_record_done ffmpeg -i /mnt/recordings/ -f mp4 /mnt/mp4s/$basename.mp4;
      # Instruct clients to adjust resolution according to bandwidth
      hls_variant _low BANDWIDTH = 288000; # Low bitrate, sub-SD resolution
      hls_variant _mid BANDWIDTH = 448000; # Medium bitrate, SD resolution
      hls_variant _high BANDWIDTH = 1152000; # High bitrate, higher-than-SD resolution
      hls_variant _hd720 BANDWIDTH = 2048000; # High bitrate, HD 720p resolution
      hls_variant _src BANDWIDTH = 4096000; # Source bitrate, source resolution
    }
    application recorder {
      live on;
      recorder all {
        record all;
        record_path /mnt/recordings;
        #record_max_size 100000K;
        #record_max_frames 4;
        record_unique on;
        #record_suffix _%d%m%Y_%H%M%S.flv;
        #record_append on;
        #record_interval 5s;
        #record_notify on;
        exec_record_done ffmpeg -i $path -f mp4 /tmp/live/$basename.mp4;
      }
    }
  }
}

http {
  open_file_cache max=200000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

    gzip on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.apple.mpegurl application/dash+xml video/mp2t video/mp4 audio/x-aac;

  server {
    listen 9200;
    server_name localhost;
    #charset koi8-r;
    #access_log logs/host.access.log main;
    location / {
      # Disable cache
      add_header ‘Cache-Control’ ‘no-cache’;
      # CORS setup
      add_header ‘Access-Control-Allow-Origin’ ‘*’ always;
      add_header ‘Access-Control-Expose-Headers’ ‘Content-Length’;
      # allow CORS preflight requests
      if ($request_method = ‘OPTIONS’) {
        add_header ‘Access-Control-Allow-Origin’ ‘*’;
        add_header ‘Access-Control-Max-Age’ 1728000;
        add_header ‘Content-Type’ ‘text/plain’;
        add_header ‘Content-Length’ 0;
        return 204;
      }
      types {
        application/dash+xml mpd;
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
        video/x-flv flv;
        video/mp4 mp4;
        video/webm webm;
      }
      root /mnt/;
    }
  }

    include             mime.types;
    default_type        application/octet-stream;



    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/local/etc/nginx/logs/access.log  main;

    sendfile            on;

    keepalive_timeout   65;

    index index.html index.php;

    include /usr/local/etc/nginx/sites-enabled/*;
}



